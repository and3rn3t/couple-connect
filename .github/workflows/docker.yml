name: 🐳 Build and Push Docker Image

on:
  push:
    branches: [main, develop]
    tags: ['v*']
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.*'
      - 'Dockerfile*'
      - 'nginx.conf'
      - 'docker-compose*.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.*'
      - 'Dockerfile*'
      - 'nginx.conf'
      - 'docker-compose*.yml'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker Hub'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

# Concurrency control
concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: couple-connect
  DOCKER_BUILDKIT: 1

jobs:
  # Detect changes and set build context
  setup:
    name: 🔍 Setup Build Context
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}
      push-enabled: ${{ steps.context.outputs.push-enabled }}
      platforms: ${{ steps.context.outputs.platforms }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect changes
        id: changes
        run: |
          # Check if Docker-related files changed
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="${{ github.event.pull_request.base.sha }}"
            head_ref="${{ github.event.pull_request.head.sha }}"
          else
            base_ref="HEAD~1"
            head_ref="HEAD"
          fi

          docker_changes=$(git diff --name-only $base_ref $head_ref | grep -E '\.(js|jsx|ts|tsx|html|css|json)$|Dockerfile|nginx\.conf|docker-compose' || true)

          if [ -n "$docker_changes" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "📦 Docker build needed - relevant files changed"
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping Docker build - no relevant changes"
          fi

      - name: 🎯 Set build context
        id: context
        run: |
          # Determine if we should push to registry
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "push-enabled=false" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.push_to_registry }}" = "false" ]; then
            echo "push-enabled=false" >> $GITHUB_OUTPUT
          else
            echo "push-enabled=true" >> $GITHUB_OUTPUT
          fi

          # Set target platforms
          platforms="${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}"
          echo "platforms=$platforms" >> $GITHUB_OUTPUT

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Couple Connect
            org.opencontainers.image.description=A modern relationship management application
            org.opencontainers.image.vendor=Couple Connect Team
            org.opencontainers.image.licenses=MIT

  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-build == 'true'
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: 🔑 Log in to Docker Hub
        if: needs.setup.outputs.push-enabled == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ needs.setup.outputs.platforms }}
          push: ${{ needs.setup.outputs.push-enabled }}
          tags: ${{ needs.setup.outputs.image-tags }}
          labels: ${{ needs.setup.outputs.image-labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 🧪 Test Docker image (local)
        if: needs.setup.outputs.push-enabled == 'false'
        run: |
          echo "🧪 Testing Docker image locally..."

          # Get the first tag for testing
          IMAGE_TAG=$(echo "${{ needs.setup.outputs.image-tags }}" | head -n1)

          # Start container
          docker run -d -p 3000:80 --name test-container $IMAGE_TAG

          # Wait for container to start
          timeout 30 bash -c 'while ! curl -f http://localhost:3000/health 2>/dev/null; do sleep 1; done' || {
            echo "❌ Health check failed"
            docker logs test-container
            exit 1
          }

          # Test main page
          curl -f http://localhost:3000/ > /dev/null || {
            echo "❌ Main page test failed"
            docker logs test-container
            exit 1
          }

          echo "✅ Docker image tests passed"

          # Cleanup
          docker stop test-container
          docker rm test-container

  # Security scanning (runs after successful build)
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.push-enabled == 'true' && needs.setup.outputs.should-build == 'true'

    steps:
      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 Run Trivy for summary
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
        continue-on-error: true

  # Deployment summary and notifications
  summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [setup, build-and-push, security-scan]
    if: always() && needs.setup.outputs.should-build == 'true'

    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "✅ **Docker build**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.setup.outputs.push-enabled }}" = "true" ]; then
            echo "🚀 **Registry push**: Enabled" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Image tags**:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.setup.outputs.image-tags }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "🧪 **Registry push**: Disabled (testing only)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "🏗️ **Platforms**: ${{ needs.setup.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "🔒 **Security scan**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.setup.outputs.push-enabled }}" = "true" ]; then
            echo "⚠️ **Security scan**: Failed or skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.setup.outputs.push-enabled }}" = "true" ]; then
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker run -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "Image built for testing purposes only (not pushed to registry)" >> $GITHUB_STEP_SUMMARY
          fi

name: 🚀 Multi-Environment Deploy

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - preview
      deployment_method:
        description: 'Deployment method'
        required: false
        default: 'cloudflare'
        type: choice
        options:
          - cloudflare
          - docker
          - both

# Grant necessary permissions for deployment
permissions:
  contents: read
  deployments: write
  actions: read
  checks: write
  pull-requests: write
  issues: write

jobs:
  determine-environment:
    name: 🎯 Environment Selection
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      url: ${{ steps.env.outputs.url }}

    steps:
      - name: 🎯 Determine deployment environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=preview" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
          fi

          # Set environment URLs
          case "$environment" in
            production)
              echo "url=https://couple-connect.pages.dev" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "url=https://staging.couple-connect.pages.dev" >> $GITHUB_OUTPUT
              ;;
            preview)
              echo "url=https://preview-${{ github.sha }}.couple-connect.pages.dev" >> $GITHUB_OUTPUT
              ;;
          esac

  deploy:
    name: 🚀 Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: determine-environment
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ needs.determine-environment.outputs.url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Configure environment
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            production)
              echo "VITE_API_URL=https://api.couple-connect.com" >> .env.production
              echo "VITE_ANALYTICS_ID=G-PROD123456" >> .env.production
              echo "VITE_ENV=production" >> .env.production
              ;;
            staging)
              echo "VITE_API_URL=https://api-staging.couple-connect.com" >> .env.staging
              echo "VITE_ANALYTICS_ID=G-STAGE123456" >> .env.staging
              echo "VITE_ENV=staging" >> .env.staging
              ;;
            preview)
              echo "VITE_API_URL=https://api-preview.couple-connect.com" >> .env.preview
              echo "VITE_ANALYTICS_ID=G-PREVIEW123456" >> .env.preview
              echo "VITE_ENV=preview" >> .env.preview
              ;;
          esac

      - name: 🏗️ Build for ${{ needs.determine-environment.outputs.environment }}
        run: |
          if [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            NODE_ENV=production npm run build
          else
            NODE_ENV=development npm run build
          fi

      - name: 🚀 Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: couple-connect
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'

      - name: 🧪 Post-deployment smoke tests
        run: |
          echo "🧪 Running smoke tests..."
          sleep 10  # Wait for deployment to propagate

          # Basic URL check
          url="${{ needs.determine-environment.outputs.url }}"
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")

          echo "## 🚀 Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: $url" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $([ "$status_code" = "200" ] && echo "✅ Healthy" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "- **Response Code**: $status_code" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} successful!"
            echo "🔗 Available at: ${{ needs.determine-environment.outputs.url }}"
          else
            echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          fi

  # Docker deployment (when docker method is selected)
  deploy-docker:
    name: 🐳 Deploy Docker Image
    runs-on: ubuntu-latest
    needs: determine-environment
    if: github.event.inputs.deployment_method == 'docker' || github.event.inputs.deployment_method == 'both'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}-docker
      url: ${{ steps.docker-deploy.outputs.url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push environment-specific image
        id: docker-deploy
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/couple-connect:${ENV}-${{ github.sha }}"
          LATEST_TAG="${{ secrets.DOCKER_USERNAME }}/couple-connect:${ENV}-latest"

          # Build with environment-specific configuration
          docker build \
            --build-arg NODE_ENV=${{ needs.determine-environment.outputs.environment }} \
            --build-arg VITE_ENV=${{ needs.determine-environment.outputs.environment }} \
            -t $IMAGE_TAG \
            -t $LATEST_TAG \
            .

          # Push images
          docker push $IMAGE_TAG
          docker push $LATEST_TAG

          echo "url=https://${ENV}-docker.couple-connect.com" >> $GITHUB_OUTPUT

          echo "## 🐳 Docker Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag**: $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Run Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Run specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 3000:80 $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run latest for environment" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 3000:80 $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🧪 Test Docker deployment
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/couple-connect:${ENV}-${{ github.sha }}"

          # Test the deployed image
          docker run -d -p 3001:80 --name test-env-container $IMAGE_TAG

          # Wait for container to be ready
          timeout 30 bash -c 'while ! curl -f http://localhost:3001/health; do sleep 1; done'

          # Test main page
          curl -f http://localhost:3001/ > /dev/null

          echo "✅ Docker deployment test passed for $ENV environment"

          # Cleanup
          docker stop test-env-container
          docker rm test-env-container

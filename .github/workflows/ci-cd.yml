name: 🚀 CI/CD Pipeline (Optimized)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Optimize concurrency - cancel old runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 3
  CI: true
  NPM_CONFIG_FUND: false
  NPM_CONFIG_AUDIT: false

jobs:
  # 🔍 Smart change detection to skip unnecessary work
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      deps: ${{ steps.changes.outputs.deps }}
      docker: ${{ steps.changes.outputs.docker }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - '*.html'
              - 'public/**'
              - 'vite.config.*'
              - 'tsconfig.json'
            deps:
              - 'package*.json'
            docker:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - 'nginx.conf'
            docs:
              - 'docs/**'
              - '*.md'

  # ⚡ Fast quality checks (parallel execution)
  quality:
    name: ⚡ Quality Checks
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true'
    strategy:
      fail-fast: false
      matrix:
        check: [lint, type-check, format:check]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 🎯 Smart caching for each check type
      - name: 💾 Cache check artifacts
        uses: actions/cache@v4
        with:
          path: |
            .eslintcache
            tsconfig.tsbuildinfo
          key: ${{ matrix.check }}-${{ runner.os }}-${{ hashFiles('package-lock.json', 'src/**/*') }}

      - name: 📦 Install dependencies
        run: npm ci --omit=optional --prefer-offline

      - name: 🔍 Run ${{ matrix.check }}
        run: npm run ${{ matrix.check }}

  # 🧪 Smart testing (only when needed)
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Cache test artifacts
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache
            .vitest-cache
          key: test-${{ runner.os }}-${{ hashFiles('package-lock.json', 'src/**/*', 'test/**/*') }}

      - name: 📦 Install dependencies
        run: npm ci --omit=optional --prefer-offline

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # 🏗️ Build and analyze (essential only)
  build:
    name: 🏗️ Build & Analyze
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.src == 'true' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vite
            dist
          key: build-${{ runner.os }}-${{ hashFiles('package-lock.json', 'src/**/*', 'vite.config.*') }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Bundle size check
        run: |
          # Simple bundle size check (no complex analysis in CI)
          total_size=$(du -sb dist | cut -f1)
          total_mb=$((total_size / 1024 / 1024))

          echo "📦 Bundle size: ${total_mb}MB"

          # Current relaxed limit during optimization (7MB)
          if [ $total_size -gt 7340032 ]; then
            echo "❌ Bundle size (${total_mb}MB) exceeds 7MB limit"
            exit 1
          fi

          echo "✅ Bundle size OK (${total_mb}MB / 7MB limit)"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 3

  # 🔒 Security (only when dependencies change)
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.deps == 'true' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔒 Audit dependencies
        run: npm audit --audit-level=high

      - name: 📋 Dependency review (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

  # 🎭 E2E tests (main branch only, or when explicitly needed)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: (github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[e2e]')) && needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🎭 Install Playwright
        run: npx playwright install chromium --with-deps

      - name: 🎭 Run E2E tests
        run: npm run test:e2e -- --workers=2

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: 3

  # 🚀 Deploy (main branch only)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: 🚀 Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: couple-connect
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # 🧹 Cleanup (always run to clean up artifacts)
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, e2e]
    if: always()
    steps:
      - name: 🗑️ Delete old artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            dist-*
            e2e-results-*
          failOnError: false
          useGlob: true

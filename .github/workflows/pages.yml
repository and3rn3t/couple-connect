name: 🚀 Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly security audit

# Optimize concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Grant necessary permissions
permissions:
  contents: write
  deployments: write
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '20'
  # Cache version - increment to bust cache
  CACHE_VERSION: v1

jobs:
  # Fast quality checks that can run in parallel
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, type-check, format-check]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js with optimized caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies (optimized)
        run: |
          # Use npm ci for faster, reliable installs
          npm ci --prefer-offline --no-audit --no-fund
        env:
          # Optimize npm install
          NPM_CONFIG_PROGRESS: false
          NPM_CONFIG_LOGLEVEL: error

      - name: 🔍 Run ${{ matrix.check }}
        run: |
          case "${{ matrix.check }}" in
            "lint")
              npm run lint
              ;;
            "type-check")
              npm run type-check
              ;;
            "format-check")
              npm run format:check
              ;;
          esac

  # Security and dependency analysis
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'schedule' }}

    steps:
      - name: � Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 🔒 Security audit
        run: npm audit --audit-level=moderate

      - name: �📋 Dependency review (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Build and bundle analysis
  build-and-analyze:
    name: 🏗️ Build & Analyze
    runs-on: ubuntu-latest
    needs: quality-checks
    outputs:
      bundle-size: ${{ steps.bundle-analysis.outputs.bundle-size }}
      should-deploy: ${{ steps.deployment-check.outputs.should-deploy }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 🧹 Optimize build environment
        run: node scripts/optimize-build.js

      - name: 🏗️ Build project
        run: npm run build
        env:
          # Optimize Vite build
          NODE_ENV: production
          VITE_BUILD_ANALYZE: true

      - name: 📊 Bundle analysis
        id: bundle-analysis
        run: |
          node scripts/analyze-bundle.js --json
          if [ -f bundle-analysis.json ]; then
            BUNDLE_SIZE=$(cat bundle-analysis.json | jq -r '.summary.totalSize // 0')
            echo "bundle-size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT

            # Check if bundle size is within limits
            if [ $BUNDLE_SIZE -gt 3145728 ]; then # 3MB
              echo "⚠️ Bundle size ($BUNDLE_SIZE bytes) exceeds 3MB limit" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "bundle-size=0" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7
          compression-level: 9

      - name: 📄 Upload bundle analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: |
            bundle-analysis.json
            build-performance.json
          retention-days: 30

      - name: 🎯 Check deployment needs
        id: deployment-check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=preview" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=none" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Performance Summary
        run: |
          echo "## 📊 Build Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size**: $((${{ steps.bundle-analysis.outputs.bundle-size }} / 1024))KB" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts**: Build files and analysis reports uploaded" >> $GITHUB_STEP_SUMMARY

  # Optimized deployment
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-analyze, security-audit]
    if: needs.build-and-analyze.outputs.should-deploy != 'none'
    environment:
      name: ${{ needs.build-and-analyze.outputs.should-deploy }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: 🚀 Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: couple-connect
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Create GitHub Release (Production only)
        if: needs.build-and-analyze.outputs.should-deploy == 'production'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            🚀 **Automated Release**

            **📊 Bundle Size**: $((${{ needs.build-and-analyze.outputs.bundle-size }} / 1024))KB
            **🔗 Deployment**: ${{ steps.deploy.outputs.url }}
            **📝 Commit**: ${{ github.sha }}
            **� Message**: ${{ github.event.head_commit.message }}

            ---
            This release was automatically created with optimized CI/CD pipeline.
          draft: false
          prerelease: false

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.build-and-analyze.outputs.should-deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size**: $((${{ needs.build-and-analyze.outputs.bundle-size }} / 1024))KB" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Performance monitoring and notifications
  performance-monitor:
    name: 📈 Performance Monitor
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download bundle analysis
        uses: actions/download-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
        continue-on-error: true

      - name: 📈 Performance tracking
        run: |
          # Store performance metrics for trending
          mkdir -p .performance-history
          if [ -f bundle-analysis.json ]; then
            cp bundle-analysis.json .performance-history/$(date +%Y-%m-%d-%H-%M)-${{ github.sha }}.json
          fi

          # Clean up old performance data (keep last 50)
          if [ -d .performance-history ]; then
            ls -t .performance-history/*.json 2>/dev/null | tail -n +51 | xargs -r rm
          fi

      - name: 📊 Performance trend analysis
        run: |
          echo "## 📈 Performance Trends" >> $GITHUB_STEP_SUMMARY
          echo "Performance data collected for trending analysis." >> $GITHUB_STEP_SUMMARY

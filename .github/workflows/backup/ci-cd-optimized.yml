name: 🚀 CI/CD Pipeline (Enhanced & Optimized)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Optimize concurrency - cancel old runs for efficiency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions for security
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
  deployments: write

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 3
  CI: true
  NPM_CONFIG_FUND: false
  NPM_CONFIG_AUDIT: false
  BUNDLE_SIZE_LIMIT: 7000000 # 7MB limit

jobs:
  # 🔍 Intelligent change detection for maximum efficiency
  changes:
    name: 🔍 Smart Change Detection
    runs-on: ubuntu-latest
    outputs:
      # Source code changes requiring full pipeline
      src: ${{ steps.changes.outputs.src }}
      # Dependency changes requiring dependency analysis
      deps: ${{ steps.changes.outputs.deps }}
      # Config changes requiring full validation
      config: ${{ steps.changes.outputs.config }}
      # Docker changes
      docker: ${{ steps.changes.outputs.docker }}
      # Documentation only changes (can skip most pipeline)
      docs: ${{ steps.changes.outputs.docs }}
      # Database schema changes
      database: ${{ steps.changes.outputs.database }}
      # Should deploy (main branch or forced)
      should-deploy: ${{ github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[deploy]') }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'index.html'
              - 'public/**'
              - 'vite.config.*'
              - 'tsconfig.json'
              - 'tailwind.config.*'
              - 'postcss.config.*'
            deps:
              - 'package*.json'
            config:
              - '.github/**'
              - 'eslint.config.*'
              - 'vitest.config.*'
              - 'playwright.config.*'
              - 'lighthouse.config.*'
            docker:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - 'nginx.conf'
            database:
              - 'database/**'
              - 'wrangler*.toml'
            docs:
              - 'docs/**'
              - '*.md'
              - 'LICENSE'

  # ⚡ Ultra-fast quality checks with enhanced automation
  quality:
    name: ⚡ Enhanced Quality Gate
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.config == 'true'
    strategy:
      fail-fast: false
      matrix:
        check:
          [
            'lint',
            'type-check',
            'format:check',
            'check:infinite-loops',
            'quality:analyze',
            'security:check',
          ]
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js with optimal caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 🎯 Advanced caching strategy for faster builds
      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .eslintcache
            tsconfig.tsbuildinfo
            node_modules/.cache
            reports/
          key: quality-${{ matrix.check }}-${{ runner.os }}-${{ hashFiles('package-lock.json', 'src/**/*', 'scripts/**/*') }}
          restore-keys: |
            quality-${{ matrix.check }}-${{ runner.os }}-
            quality-${{ runner.os }}-

      - name: 📦 Install dependencies (quality checks)
        run: |
          # For quality checks, we can exclude optional deps to speed up installation
          # Only include if specific checks need build tools
          if [[ "${{ matrix.check }}" == "quality:analyze" ]]; then
            npm ci --prefer-offline --no-audit --no-fund
          else
            npm ci --omit=optional --prefer-offline --no-audit --no-fund
          fi

      - name: 🔍 Run ${{ matrix.check }}
        run: npm run ${{ matrix.check }}

      # 📊 Upload enhanced reports for analysis
      - name: 📊 Upload quality reports
        if: matrix.check == 'quality:analyze' && always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ github.sha }}
          path: |
            reports/code-quality-*.json
            reports/code-quality-*.md
          retention-days: 7

  # 📊 Enhanced dependency analysis (only when deps change)
  dependency-analysis:
    name: 📊 Dependency Health Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.deps == 'true' || needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔍 Comprehensive dependency analysis
        run: npm run deps:analyze

      - name: 📊 Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports-${{ github.sha }}
          path: |
            reports/dependency-*.json
            reports/dependency-*.md
          retention-days: 14

  # 🗄️ Database health check (when database changes)
  database-health:
    name: 🗄️ Database Health Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.database == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🗄️ Database health analysis
        run: npm run db:health
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: 📊 Upload database reports
        uses: actions/upload-artifact@v4
        with:
          name: database-reports-${{ github.sha }}
          path: |
            reports/database-*.json
            reports/database-*.md
          retention-days: 7

  # 🧪 Smart testing with optimal parallelization
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.src == 'true'
    strategy:
      matrix:
        test-type: ['unit', 'integration']
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Cache test artifacts
        uses: actions/cache@v4
        with:
          path: |
            coverage/
            .vitest/
          key: test-${{ matrix.test-type }}-${{ runner.os }}-${{ hashFiles('package-lock.json', 'src/**/*', 'test/**/*') }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm run test:unit
          else
            npm run test:integration
          fi

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.sha }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # 🏗️ Optimized build with enhanced analysis
  build:
    name: 🏗️ Build & Performance Analysis
    runs-on: ubuntu-latest
    needs: [changes, quality, test]
    if: needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 🎯 Advanced build caching
      - name: 💾 Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/.vite/
          key: build-${{ runner.os }}-${{ hashFiles('package-lock.json', 'src/**/*', 'vite.config.*') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build application
        run: npm run build

      # 📊 Enhanced performance monitoring
      - name: 📊 Performance analysis
        run: npm run perf:monitor

      # 🔍 Bundle analysis with size enforcement
      - name: 🔍 Bundle analysis
        run: |
          npm run build:analyze

          # Check bundle size limit
          total_size=$(du -b dist/ | cut -f1)
          if [ $total_size -gt ${{ env.BUNDLE_SIZE_LIMIT }} ]; then
            echo "❌ Bundle size ($total_size bytes) exceeds limit (${{ env.BUNDLE_SIZE_LIMIT }} bytes)"
            exit 1
          else
            echo "✅ Bundle size ($total_size bytes) within limit"
          fi

      # 🎯 PWA optimization
      - name: 🎯 PWA optimization
        run: npm run pwa:optimize

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

      - name: 📊 Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ github.sha }}
          path: |
            reports/performance-*.json
            reports/performance-*.md
            reports/bundle-analysis-*.json
            reports/pwa-*.json
          retention-days: 14

  # 🎭 E2E Testing with Playwright (parallel execution)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.changes.outputs.src == 'true'
    strategy:
      matrix:
        shard: [1, 2, 3]
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🎭 Run E2E tests (shard ${{ matrix.shard }})
        run: npx playwright test --shard=${{ matrix.shard }}/3

      - name: 📊 Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-shard-${{ matrix.shard }}-${{ github.sha }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # 🔒 Enhanced security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.deps == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔒 Comprehensive security audit
        run: |
          npm audit --audit-level high
          npm run security:check

      - name: 📊 Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            reports/security-*.json
            reports/security-*.md
          retention-days: 30

  # 📊 Comprehensive reporting
  reporting:
    name: 📊 Generate Reports
    runs-on: ubuntu-latest
    needs: [quality, dependency-analysis, database-health, test, build, e2e, security]
    if: always() && (needs.changes.outputs.src == 'true' || needs.changes.outputs.deps == 'true')
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Download all reports
        uses: actions/download-artifact@v5
        with:
          pattern: '*-reports-${{ github.sha }}'
          merge-multiple: true
          path: reports/

      - name: 📊 Generate comprehensive report
        run: |
          echo "# 📊 CI/CD Pipeline Report" > pipeline-report.md
          echo "**Commit**: ${{ github.sha }}" >> pipeline-report.md
          echo "**Branch**: ${{ github.ref }}" >> pipeline-report.md
          echo "**Timestamp**: $(date -u)" >> pipeline-report.md
          echo "" >> pipeline-report.md

          # Add available reports
          echo "## 📋 Generated Reports" >> pipeline-report.md
          find reports/ -name "*.md" -exec echo "- {}" \; >> pipeline-report.md || true

          # Add job status summary
          echo "" >> pipeline-report.md
          echo "## 🎯 Pipeline Status" >> pipeline-report.md
          echo "- Quality Checks: ${{ needs.quality.result }}" >> pipeline-report.md
          echo "- Testing: ${{ needs.test.result }}" >> pipeline-report.md
          echo "- Build: ${{ needs.build.result }}" >> pipeline-report.md
          echo "- E2E Tests: ${{ needs.e2e.result }}" >> pipeline-report.md
          echo "- Security Scan: ${{ needs.security.result }}" >> pipeline-report.md

      - name: 📊 Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-report-${{ github.sha }}
          path: |
            pipeline-report.md
            reports/
          retention-days: 30

  # 🚀 Optimized deployment (only on main branch or forced)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [changes, quality, test, build, e2e, security]
    if: needs.changes.outputs.should-deploy == 'true' && needs.build.result == 'success'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: 🚀 Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: couple-connect
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pipeline Duration**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # 🧹 Intelligent cleanup (only run when needed)
  cleanup:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy, e2e, reporting]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: 🗑️ Delete temporary artifacts (keep reports)
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            dist-*
            e2e-results-*
            test-results-*
          failOnError: false
          useGlob: true

  # 🔄 Post-deployment validation (production only)
  post-deploy:
    name: 🔄 Post-Deploy Validation
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success'
    steps:
      - uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔍 Production health check
        run: |
          # Wait for deployment to be available
          sleep 30

          # Run production validation
          npm run validate:production || true
        env:
          DEPLOYMENT_URL: ${{ needs.deploy.outputs.url }}

      - name: 📊 Post-deploy summary
        run: |
          echo "## ✅ Post-Deploy Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Production URL**: ${{ needs.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Status**: Validated" >> $GITHUB_STEP_SUMMARY
